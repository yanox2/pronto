<?php
/* Copyright 2013 dodat */
/*---------------------------------------------------------------------------*
 * Abstract class - Batch
 *      バッチ基底クラス
 *---------------------------------------------------------------------------*/
namespace PR;

abstract class Batch implements Task{

	protected $oDate = null;

	private $aOptions_ = array();
	private $sOptStr_ = null;
	private $aLongOpts_ = null;
	private $sUsage_ = 'usage: command -i inFile -o outFile [-v]';

	private $aDenySys_ = null;

	private $sName_ = null;
	private $bDao_ = false;
	private $bTran_ = false;
	private $bCommit_ = false;
	private $sErrLogPath_ = null;

/*---------------------------------------------------------------------------*
 * Abstract Methods
 *---------------------------------------------------------------------------*/
	abstract public function action();

/*---------------------------------------------------------------------------*
 * Set Parameters
 *---------------------------------------------------------------------------*/
	public function setOpt($rsOptStr,$raLongOpts=null){
		$this->sOptStr_ = $rsOptStr;
		$this->aLongOpts_ = $raLongOpts;
	}

	public function setUsage($rsUsage){
		$this->sUsage_ = $rsUsage;
	}

/*---------------------------------------------------------------------------*
 * Implement Methods
 *---------------------------------------------------------------------------*/
	public function setDenySys($raDenySys){
		$this->aDenySys_ = $raDenySys;
	}

	public function getUsage(){
		return $this->sUsage_;
	}

	public function getName(){
		return $this->sName_;
	}

	public function hasDao(){
		return $this->bDao_;
	}

	public function hasTran(){
		return $this->bTran_;
	}

	public function hasCommit(){
		return $this->bCommit_;
	}

	public function init($roDate){
		$this->oDate = $roDate;
		$this->ini_set();
		return true;
	}

	public function checkOptions(){
		if((empty($this->sOptStr_))&&(empty($this->aLongOpts_))) return true;
		$rc = getopt($this->sOptStr_,$this->aLongOpts_);
		if($rc === false) return false;
		$this->aOptions_ = $rc;
		return true;
	}

/*---------------------------------------------------------------------------*
 * Protected Methods
 *---------------------------------------------------------------------------*/
	protected function ini_set(){
		ini_set('error_reporting',6135);
		ini_set('display_errors',true);
		ini_set('log_errors',true);
		if($this->sErrLogPath_) ini_set('error_log',$this->sErrLogPath_);

		ini_set('default_charset','UTF-8');
		ini_set('mbstring.language','Japanese');
		ini_set('mbstring.internal_encoding','UTF-8');
		ini_set('mbstring.http_input','auto');
		ini_set('mbstring.http_output','UTF-8');
		ini_set('mbstring.encoding_translation',0);

		//php_flag short_open_tag on // PHP_INI_PERDIR
		ini_set('session.name','pd');
		ini_set('session.gc_maxlifetime',86400);

		ini_set('memory_limit','1024M');
		//php_value post_max_size 20M // PHP_INI_PERDIR
		//php_value upload_max_filesize 20M // PHP_INI_PERDIR

		ini_set('max_execution_time',120);
		//php_value max_input_time 120 // PHP_INI_PERDIR
	}

	protected function setName($rsName){
		$this->sName_ = $rsName;
	}

	protected function setDao($rbDao=false,$rbTran=false){
		$this->bDao_ = $rbDao;
		$this->bTran_ = $rbTran;
	}

	protected function getOpt(){
		return $this->aOptions_;
	}

	protected function commitEnd(){
		$this->bCommit_ = true;
	}

	protected function setErrLogPath($rsPath){
		$this->sErrLogPath_ = $rsPath;
	}

	protected function log($rsMessage){
		$str = $this->sName.':'.$rsMessage;
		ELOG($str,false,1);
	}

	protected function errorOccurred($riCode,$rsMessage){
		//throw new Exception($riCode,$rsMessage);
		$str = $this->sPhese_.':'.$rsMessage.' rc='.$riCode;
		ELOG($str,false,1);
	}
}
?>
