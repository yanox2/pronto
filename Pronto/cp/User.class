<?php
/* Copyright 2013 dodat */
/*---------------------------------------------------------------------------*
 * Class
 *      ユーザ基底クラス
 *---------------------------------------------------------------------------*/
namespace PR;

abstract class User{

	protected $oDao = null;
	protected $oMySubSys = null;
	protected $oMyProf = null;

	protected $aReqSubSys = null;

	protected $oMail = null;
	protected $oMessage = null;

	protected $aPostProf = null;

	protected $aSesTargets_ = array('sLoginId','sPasswd');
	protected $aCkTargets_ = array('sLoginId','sPasswd');

	private $sSesPrefix_ = C_PR_PREFIX_SESSION;
	private $sCkPrefix_ = C_PR_PREFIX_COOKIE;

	public function __construct(){
		$this->oDao = \PR\DaoFactory::create();
		$this->oMail = new \PR\Mail();
		$this->oMessage = new \PR\Message();
	}

	public function setPrefixes($raPrefixes){
		$this->sSesPrefix_ = $raPrefixes['session'];
		$this->sCkPrefix_ = $raPrefixes['cookie'];
	}

	public function getSubSys(){
		return $this->oMySubSys;
	}
	public function getProf(){
		return $this->oMyProf;
	}
	public function setSubSys($roSubSystem){
		$this->oMySubSys = $roSubSystem;
	}
	public function setProf($roProfile){
		$this->oMyProf = $roProfile;
	}

	public function reqSubSys($raReqTarget){
		$this->aReqSubSys = $raReqTarget;
	}

	public function setSessionTargets($raTargets){
		$this->aSesTargets_ = $raTargets;
	}
	public function setCookieTargets($raTargets){
		$this->aCkTargets_ = $raTargets;
	}

/*---------------------------------------------------------------------------*
 * Reader
 *---------------------------------------------------------------------------*/
	public function numSubSys($raWhereTgs=null,$rsTokens=null){
		return $this->oMySubSys->numX($raWhereTgs,$rsTokens);
	}

	public function readSubSys($raWhereTgs=null,$rbHasLock=false){
		$sTokens = null;
		if($rbHasLock) $sTokens = 'for update';
		$rc = $this->oMySubSys->readX($raWhereTgs,$sTokens);
		return $rc;
	}

	public function numProf($raWhereTgs=null,$rsTokens=null){
		return $this->oMyProf->numX($raWhereTgs,$rsTokens);
	}

	public function readProf($raWhereTgs=null,$rbHasLock=false){
		$sTokens = null;
		if($rbHasLock) $sTokens = 'for update';
		$rc = $this->oMyProf->readX($raWhereTgs,$sTokens);
		if($rc != 0) return $rc;
		return 0;
	}

	public function pageProf($riPage,$riLimit,$raWhereTgs=null,$rsTokens=''){
		$rc = $this->numX($raWhereTgs,$sTokens);
		if($rc != 0) return $rc;
		$this->oPaging = new \PR\Paging($riPage,$riLimit,$rc);
		$tokens = $rsTokens.' '.$this->oPaging->getSql();
		return $this->oMyProf->listsX($raWheres,$tokens);
	}

	public function listsProf($raWhereTgs=null,$rsTokens=null,$raIndex=null){
		return $this->oMyProf->listsX($raWhereTgs,$rsTokens,$raIndex);
	}

/*---------------------------------------------------------------------------*
 * Post
 *---------------------------------------------------------------------------*/
	public function postProf(){
		$this->oMyProf->post();
		$rc = $this->oMyProf->checkPostByTarget();
		if(!empty($rc)) return $rc;
		return null;
	}

/*---------------------------------------------------------------------------*
 * Update
 *---------------------------------------------------------------------------*/
	public function addProf(){
		$rc = $this->oMyProf->addX();
		return $rc;
	}

	public function updateProf($raEncVars=null){
		$prof = $this->oMyProf->getEntity();
		if(!empty($raEncVars)){
			Misc::encode($prof,$raEncVars);
		}
		$rc = $this->oMyProf->updateX();
		if($rc != 0) return $rc;
		$this->setSession();
		//$this->setCookie($prof->sLoginId,$post->sPasswd);
		return 0;
	}

/*---------------------------------------------------------------------------*
 * Message
 *---------------------------------------------------------------------------*/
	public function getMessage($riType=\PR\Message::NORMAL){
		$this->oMessage->load();
		return $this->oMessage->toString($riType);
	}

	public function setMessage($rsMessage,$riType=\PR\Message::NORMAL){
		$this->oMessage->add($rsMessage,$riType);
		$this->oMessage->save();
	}

	public function loadMessage(){
		$this->oMessage->load();
	}

	public function saveMessage(){
		$this->oMessage->save();
	}

/*---------------------------------------------------------------------------*
 * Session & Cookie
 *---------------------------------------------------------------------------*/
	public function startSession(){
		session_start();
	}

	public function fromSession(){
		$fx = $this->sSesPrefix_;
		$prof = $this->oMyProf->getEntity();
		if(empty($prof)) $prof = $this->oMyProf->newEntity();
		foreach($this->aSesTargets_ as $target){
			if((isset($_SESSION[$fx.$target]))&&(property_exists($prof,$target))){
				$prof->{$target} = $_SESSION[$fx.$target];
			}
		}
		if(!$this->aReqSubSys) return;

		$subsys = $this->oMySubSys->getEntity();
		if(empty($subsys)) $subsys = $this->oMySubSys->newEntity();
		foreach($this->aSesTargets_ as $target){
			if((isset($_SESSION[$fx.$target]))&&(property_exists($subsys,$target))){
				$subsys->{$target} = $_SESSION[$fx.$target];
			}
		}
	}

	public function setSession(){
		$fx = $this->sSesPrefix_;
		$prof = $this->oMyProf->getEntity();
		if(empty($prof)) return;
		foreach($this->aSesTargets_ as $target){
			if(property_exists($prof,$target)) $_SESSION[$fx.$target] = $prof->{$target};
		}
		if(!$this->aReqSubSys) return;

		$subsys = $this->oMySubSys->getEntity();
		if(empty($subsys)) return;
		foreach($this->aSesTargets_ as $target){
			if(!(isset($_SESSION[$fx.$target]))&&(property_exists($subsys,$target))) $_SESSION[$fx.$target] = $subsys->{$target};
		}
	}

	public function clearSession(){
		$fx = $this->sSesPrefix_;
		foreach($this->aSesTargets_ as $target){
			unset($_SESSION[$fx.$target]);
		}
	}

	public function hasCookie($sTarget){
		return isset($_COOKIE[$this->sCkPrefix_.$sTarget]);
	}

	public function fromCookie(){
		if(empty($this->aCkTargets_)) return false;
		$fx = $this->sCkPrefix_;
		$prof = $this->oMyProf->getEntity();
		if(empty($prof)) $prof = $this->oMyProf->newEntity();
		$rcode = false;
		foreach($this->aCkTargets_ as $target){
			if(isset($_COOKIE[$fx.$target])){
				$prof->{$target} = $_COOKIE[$fx.$target];
				$rcode = true;
			}
		}
		return $rcode;
	}

	public function setCookie($rsPath=null,$rsDomain=null,$rbSecure=false,$rbHttpOnly=false){
		if(empty($this->aCkTargets_)) return;
		$fx = $this->sCkPrefix_;
		$time = time() + 30 * 24 * 3600;
		$prof = $this->oMyProf->getEntity();
		if(empty($prof)) return;
		foreach($this->aCkTargets_ as $target){
			setcookie($fx.$target,$prof->{$target},$time,$rsPath,$rsDomain,$rbSecure,$rbHttpOnly);
		}
	}

	public function removeCookie($rsPath=null,$rsDomain=null,$rbSecure=false,$rbHttpOnly=false){
		if(empty($this->aCkTargets_)) return;
		$time = time() - 3600;
		foreach($this->aCkTargets_ as $target){
			setcookie($this->sCkPrefix_.$target,'',$time,$rsPath,$rsDomain,$rbSecure,$rbHttpOnly);
		}
	}

	public function fromCookies($rsKey){
		$fx = $this->sCkPrefix_;
		if(!isset($_COOKIE[$fx.'lgp'])) return false;
		if(empty($this->aCkTargets_)) return false;
		$prof = $this->oMyProf->getEntity();
		if(empty($prof)) $prof = $this->oMyProf->newEntity();

		$lgp = $_COOKIE[$fx.'lgp'];
		$items = unserialize(\PR\Crypt::decrypt($lgp,$rsKey));
		$rcode = false;
		foreach($items as $target=>$item){
			if(in_array($target,$this->aCkTargets_)){
				$prof->{$target} = $item;
				$rcode = true;
			}
		}
		return $rcode;
	}

	public function setCookies($rsKey,$rsPath=null,$rsDomain=null,$rbSecure=false,$rbHttpOnly=false){
		if(empty($this->aCkTargets_)) return;
		$fx = $this->sCkPrefix_;
		$time = time() + 30 * 24 * 3600;
		$prof = $this->oMyProf->getEntity();
		if(empty($prof)) return;
		$cks = array();
		foreach($this->aCkTargets_ as $target){
			$cks[$target] = $prof->{$target};
		}
		if(!empty($cks)){
			$item = \PR\Crypt::encrypt(serialize($cks),$rsKey);
			setcookie($fx.'lgp',$item,$time,$rsPath,$rsDomain,$rbSecure,$rbHttpOnly);
		}
	}

	public function removeCookies($rsPath=null,$rsDomain=null,$rbSecure=false,$rbHttpOnly=false){
		$time = time() - 3600;
		setcookie($this->sCkPrefix_.'lgp','',$time,$rsPath,$rsDomain,$rbSecure,$rbHttpOnly);
	}

	public function getAfterLogined($rsPrefix=''){
		return urldecode(Misc::getOneTimeSes('Redirect'.$rsPrefix));
	}
	public function setAfterLogined($rsUrl,$rsPrefix=''){
		Misc::setOneTimeSes('Redirect'.$rsPrefix,urlencode($rsUrl));
	}

	public function isJustLogin($rsPrefix=''){
		return (Misc::getOneTimeSes('JustLogin'.$rsPrefix) === true);
	}
	public function justLogin($rsPrefix=''){
		Misc::setOneTimeSes('JustLogin'.$rsPrefix,true);
	}

/*---------------------------------------------------------------------------*
 * Login
 *---------------------------------------------------------------------------*/
	public function isLogin($rsTarget){
		return isset($_SESSION[$this->sSesPrefix_.$rsTarget]);
	}

	public function login($raTargets=null,$rbNoSubSys=false){
		if(!$rbNoSubSys){
			$this->oMySubSys->setArray($this->aReqSubSys);
			$rc = $this->oMySubSys->checkPostByTarget();
			if(!empty($rc)) return $rc;
			$target = key($this->aReqSubSys);
			$rc = $this->readSubSys(array($target));
			if($rc != 0) return $rc;
		}
		$this->oMyProf->post();
		$this->aPostProf = $this->oMyProf->getArray();
		$rc = $this->oMyProf->checkPostByTarget();
		if(!empty($rc)){
			$this->setMessage($rc,\PR\Message::ERROR);
			return C_PR_ERR_EPARAM;
		}
		if(!$rbNoSubSys) $this->oMyProf->mergeEntity($this->oMySubSys,true);
		$rc = $this->readProf($raTargets,true);
		if($rc != 0) return $rc;
		return 0;
	}

	public function logout(){
		$this->clearSession();
	}

	public function restore(){
		if(empty($this->aPostProf)) return;
		$this->oMyProf->setArray($this->aPostProf);
	}

	public function checkPassword($rsPassVal,$rsPassVar='sPasswd',$rsFailVar='iFailLogin',$riLimit=3){
		$prof = $this->oMyProf->getEntity();
		if(!Misc::hasProp($prof,$rsPassVar)) return C_PR_ERR_EPARAM;
		if(!Misc::hasProp($prof,$rsFailVar)) return C_PR_ERR_EPARAM;
		if($prof->{$rsFailVar} >= $riLimit) return C_PR_ERR_ELOCKED;
		if($rsPassVal == $prof->{$rsPassVar}) return 0;

		// パスワード誤り
		$prof->{$rsFailVar}++;
		$this->oMyProf->targetPrimary();
		$rc = $this->oMyProf->updateX(array($rsFailVar));
		if($rc != 0) return $rc;
		if($prof->{$rsFailVar} >= $riLimit) return C_PR_ERR_EOVER;
		return C_PR_ERR_EINVAL;
	}

/*---------------------------------------------------------------------------*
 * Mail
 *---------------------------------------------------------------------------*/
	public function sendMail($rsSubject,$rsBody,$rsNameVar='sName',$rsEMailVar='sEMail'){
		$prof = $this->oMyProf->getEntity();
		if(!Misc::hasProp($prof,$rsNameVar)) return C_PR_ERR_EPARAM;
		if(!Misc::hasProp($prof,$rsEMailVar)) return C_PR_ERR_EPARAM;
		$to = array($prof->{$rsEMailVar}=>$prof->{$rsNameVar});
		$rc = $this->oMail->send($to,$rsSubject,$rsBody);
		return $rc;
	}

	public function sendMailX($rsSubject,$rsBody,$raTo,$raDoc=null,$raCC=null,$raBCC=null){
		$rc = $this->oMail->send($raTo,$rsSubject,$rsBody,$raDoc,$raCC,$raBCC);
		return $rc;
	}

/*---------------------------------------------------------------------------*
 * Protected Methods
 *---------------------------------------------------------------------------*/
	protected function errorOccured($riCode,$rsMsgId,$rsSection){
		$msg = SMSG($rsMsgId,$this->sMyName_.'.'.$rsSection);
		throw new Exception($riCode,$msg,true);
	}
}
?>
