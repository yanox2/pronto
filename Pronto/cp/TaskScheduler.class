<?php
/* Copyright 2013 dodat */
/*---------------------------------------------------------------------------*
 * Class - Batch
 *      タスクスケジューラ
 *---------------------------------------------------------------------------*/
namespace PR;

class TaskScheduler{

	private $aTasks_ = array();
	private $aDenySys_ = array();
	private $oDao_ = null;
	private $oDate_ = null;
	private $sPhese_ = null;

	public function __construct(){
		set_time_limit(0);
	}

/*---------------------------------------------------------------------------*
 * Set Parameters
 *---------------------------------------------------------------------------*/
	public function addTask($roTask){
		$this->aTasks_[] = $roTask;
	}

	public function setDenySys($raDenySys){
		$this->aDenySys_ = $raDenySys;
	}

/*---------------------------------------------------------------------------*
 * Run Process
 *---------------------------------------------------------------------------*/
	public function run(){
		$this->setPhese('TaskScheduler');
		$err = false;
		if(empty($this->aTasks_)){
			$this->errorOccurred(C_PR_ERR_ENOENT,'Batch end normaly.');
			return;
		}

		$date = date('Y/m/d H:i',time());
		$opts = getopt('d::',array('date'));
		if((array_key_exists('d',$opts))&&($opts['d'])) $date = $opts['d'];
		if((array_key_exists('date',$opts))&&($opts['date'])) $date = $opts['date'];

		$this->oDate_ = new Date();
		$this->oDate_->setOfStr($date);
		try{
			foreach($this->aTasks_ as $task){
				$name = $task->getName();
				$hasDao = $task->hasDao();
				$hasTran = $task->hasTran();
				$this->setPhese($name);
				$task->setDenySys($this->aDenySys_);
				$rc = $task->init($this->oDate_);
				if(!$rc){
					$this->errorOccurred(0,'Skip end.');
					continue;
				}
				$rc = $task->checkOptions();
				if(!$rc){
					$err = true;
					$this->errorOccurred(0,$task->getUsage());
					continue;
				}
				$this->resume($hasDao,$hasTran);
				$task->action();
				$hasCommit = $task->hasCommit();
				$this->suspend($hasDao,$hasTran,$hasCommit,$task->hasCommit());
			}

		}catch(Exception $e){
			$this->errorOccurred($e->getCode(),$e->getMessage());
			$err = true;
		}

		if(!$err) $this->errorOccurred(0,'Batch end normaly.');
		else $this->errorOccurred(0,'abnormaly end.');
	}

/*---------------------------------------------------------------------------*
 * Protected Methods
 *---------------------------------------------------------------------------*/
	protected function suspend($rbDao,$rbTran,$rbCommit){
		if($rbDao){
			if($rbTran){
				if($rbCommit) $this->oDao_->commit();
				else $this->oDao_->rollback();
			}
			//$this->oDao_->close();
		}
	}

	protected function resume($rbDao,$rbTran){
		if($rbDao){
			$this->oDao_ = DaoFactory::create();
			$this->oDao_->connect();
			if($rbTran) $this->oDao_->begin();
		}
	}

	protected function setPhese($rsPhese){
		$this->sPhese_ = $rsPhese;
	}

	protected function errorOccurred($riCode,$rsMessage){
		//throw new Exception($riCode,$rsMessage);
		$str = $this->sPhese_.':'.$rsMessage.' rc='.$riCode;
		ELOG($str,false,1);
	}

	protected function println($rsMessage){
		$str = $rsMessage;
		ELOG($str,false,1);
	}
}
?>
