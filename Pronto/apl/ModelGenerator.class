<?php
/* Copyright 2013 dodat */
/*---------------------------------------------------------------------------*
 * Class - Application
 *      Model生成ツール
 *---------------------------------------------------------------------------*/
namespace PR;

class ModelGenerator extends Batch{

	private $sNameSpace_ = null;
	private $aClasses_ = array();
	private $aInsLines_ = array();

	public function __construct(){
		$this->setOpt('i:',array('input::'));
		$this->setUsage('usage: php ModelGenerator.php -i entityfile');
		$this->setName('ModelGenerator');
		$this->setDao();
	}

/*---------------------------------------------------------------------------*
 * Inherited Abstract Methods
 *---------------------------------------------------------------------------*/
	public function action(){
		$this->_readFile();
		if(empty($this->aClasses_)){
			throw new Exception(C_PR_ERR_ENOENT,SMSG('PR_E018','readFile'));
		}
		//print_r($this->aClasses_);

		foreach($this->aClasses_ as $class=>$bean){
			$this->_writeContainer($class,$bean);
			$this->_writeEntity($class,$bean);
		}
	}

/*---------------------------------------------------------------------------*
 * Private Methods
 *---------------------------------------------------------------------------*/
	private function _writeContainer($rsClass,$roBean){
		$path = $rsClass.'.class';
		$filer = new Filer();
		$filer->setOutFile($path,'UTF-8');
		$rc = $filer->openFile();
		if($rc != 0){
			throw new Exception($rc,SMSG('PR_E017','openFile',$path));
		}

		$str = '';
		$str .= '<?php'."\n";
		$str .= '/*---------------------------------------------------------------------------*'."\n";
		$str .= ' * Class - Entity Container'."\n";
		$str .= ' *      '.$roBean->sName."\n";
		$str .= ' *---------------------------------------------------------------------------*/'."\n";
		if(!empty($this->sNameSpace_)) $str .= 'namespace '.$this->sNameSpace_.';'."\n";
		$str .= ''."\n";
		$str .= 'class '.$roBean->sClass.' extends \PR\Container{'."\n";
		$str .= ''."\n";
		$str .= '	protected $aNameTags = null;'."\n";
		$str .= '	protected $aTargets = array(';
		$sp = '';
		foreach($roBean->aColumns as $col=>$inf){
			$str .= $sp."'".$inf['var']."'";
			$sp = ',';
		}
		$str .= ');'."\n";
		if(!empty($roBean->aInsLines)){
			$str .= ''."\n";
			foreach($roBean->aInsLines as $line){
				$str .= $line;
			}
		}
		$str .= ''."\n";
		$str .= '	public function __construct($roDao=null){'."\n";
		$str .= '		parent::__construct($roDao);'."\n";
		// Primary Key
		$str .= '		$aPrimaryKeys = array(';
		$sp = '';
		foreach($roBean->aPrimaryKeys as $var=>$col){
			$str .= $sp."'".$var."'";
			$sp = ',';
		}
		$str .= ');'."\n";
		// Insert Key
		$str .= '		$aInsKey = array(';
		$find = false;
		foreach($roBean->aColumns as $col=>$inf){
			if(array_key_exists('ins',$inf)){
				$str .= "'".$col."'=>".$inf['ins'].");\n";
				$find = true;
				break;
			}
		}
		if(!$find) $str .= '\\PR\\Model::INS_NONE);'."\n";
		$str .= '		$sMyName = get_class($this);'."\n";
		$str .= '		$this->setParameters(\''.$roBean->sTable.'\',$aPrimaryKeys,$aInsKey,$sMyName);'."\n";
		$str .= ''."\n";
		$str .= '		$this->aNameTags = array();'."\n";
		foreach($roBean->aColumns as $col=>$inf){
			$str .= '		$this->aNameTags[\''.$inf['var'].'\'] = new \PR\NameTag(';
			$str .= "'".$inf['var']."',";
			$str .= "'".$inf['post']."',";
			$str .= "'".$col."',";
			$str .= "'".$inf['name']."',";
			$str .= $inf['type'];
			$str .= ');'."\n";
		}
		$str .= '	}'."\n";
		$str .= '}'."\n";
		$str .= '?>'."\n";
		$rc = $filer->writeFile($str);
		if($rc != 0){
			throw new Exception($rc,SMSG('PR_E017','writeFile',$path));
		}
		$filer->closeFile();
	}

	private function _writeEntity($rsClass,$roBean){
		$path = $rsClass.'Entity.class';
		$filer = new Filer();
		$filer->setOutFile($path,'UTF-8');
		$rc = $filer->openFile();
		if($rc != 0){
			throw new Exception($rc,SMSG('PR_E017','openFile',$path));
		}

		$str = '';
		$str .= '<?php'."\n";
		$str .= '/*---------------------------------------------------------------------------*'."\n";
		$str .= ' * Class - Entity Bean'."\n";
		$str .= ' *      '.$roBean->sName."Entity\n";
		$str .= ' *---------------------------------------------------------------------------*/'."\n";
		if(!empty($this->sNameSpace_)) $str .= 'namespace '.$this->sNameSpace_.';'."\n";
		$str .= ''."\n";
		$str .= 'class '.$roBean->sClass.'Entity{'."\n";
		$str .= ''."\n";

		// Member
		foreach($roBean->aColumns as $col=>$inf){
			$ini = $this->_getDefaultStr($inf['type']);
			$str .= '	public $'.$inf['var'].' = '.$ini.';';
			$str .= ' // '.$col.' '.$inf['colType'];
			if(array_key_exists('ins',$inf)) $str .= ' ('.$inf['ins'].')';
			$str .= ''."\n";
		}
		$str .= "\n";

		$str .= '}'."\n";
		$str .= '?>'."\n";
		$rc = $filer->writeFile($str);
		if($rc != 0){
			throw new Exception($rc,SMSG('PR_E017','writeFile',$path));
		}
		$filer->closeFile();
	}

	private function _readFile(){
		$opts = $this->getOpt();
		$path = $opts['i'];
		$filer = new Filer($path);
		$rc = $filer->openFile();
		if($rc != 0){
			throw new Exception($rc,SMSG('PR_E017','openFile',$path));
		}

		$cmtPhase = false;
		$clsPhase = false;
		$insPhase = false;
		$bean = null;
		$lineNum = 0;
		while(($lineP = $filer->getLine(true)) !== null){
			$lineNum++;
			$line = Misc::trim($lineP);

			// insert phase
			if(mb_strpos($line,'--- ins --- */') !== false){
				$insPhase = false;
				continue;
			}
			if(mb_strpos($line,'/* --- ins ---') !== false){
				$insPhase = true;
				continue;
			}
			if($insPhase){
				$bean->aInsLines[] = $lineP;
				continue;
			}

			if(!$filer->checkLine($line)) continue;
			if(mb_strpos($line,'*/') !== false){
				$cmtPhase = false;
				continue;
			}
			if(mb_strpos($line,'/*') !== false){
				$cmtPhase = true;
				continue;
			}
			if(mb_strpos($line,'# namespace') !== false){
				$this->sNameSpace_ = $filer->substr($line,'# namespace');
			}
			if($cmtPhase) continue;

			if(!$clsPhase){
				$str = $filer->substr($line,'# Container:');
				if(empty($str)) continue;
				$names = explode(',',$str);
				$bean = new ModelData($names[0],$names[1]);
				$clsPhase = true;
				continue;
			}

			// class phase
			$str = $filer->substr($line,'primary key(',')');
			if(!empty($str)){
				$keys = explode(',',$str);
				foreach($keys as $pkey){
					$var = $bean->aColumns[$pkey]['var'];
					$bean->aPrimaryKeys[$var] = $pkey;
				}
				$this->aClasses_[$bean->sClass] = $bean;
				$clsPhase = false;
				continue;
			}
			// table
			$str = $filer->substr($line,'create table','(');
			if(!empty($str)){
				$bean->sTable = $str;
				continue;
			}
			// column
			$col = $this->_getColumn($line,$filer);
			if($col == null){
				$msg = 'Invalid column. line='.$lineNum;
				throw new Exception(C_PR_ERR_EINVAL,$msg);
			}
			$bean->aColumns += $col;
		}
		$filer->closeFile();
	}

	private function _getColumn($rsLine,$roFiler){
		$line = $rsLine;
		if(mb_strpos($line,'var=') === false) return null;
		$column = array();
		$words = explode(' ',$line);
		$colName = $words[0];
		for($i=1; $i<count($words); $i++){
			if(!empty($words[$i])){
				$colType = $words[$i];
				break;
			}
		}
		$strs = explode(',',$roFiler->substr($line,'#'));
		$var=null;$post=null;$name=null;$type=null;$ins=null;
		foreach($strs as $part){
			if(mb_strpos($part,'var=') !== false) $var = mb_substr($part,4);
			if(mb_strpos($part,'post=') !== false) $post = mb_substr($part,5);
			if(mb_strpos($part,'name=') !== false) $name = mb_substr($part,5);
			if(mb_strpos($part,'type=') !== false) $type = mb_substr($part,5);
			if(mb_strpos($part,'ins=') !== false) $ins = mb_substr($part,4);
		}
		if($post == null) return null;
		$typeStr = $this->_getType($type);
		$column[$colName] = array('var'=>$var,'post'=>$post,'name'=>$name,'type'=>$typeStr,'colType'=>$colType);
		if($ins != null) $column[$colName]['ins'] = $this->_getKind($ins);
		return $column;
	}

	private function _getDefaultStr($rsType){
		$str = 'null';
		if(($rsType == '\\PR\\Model::DT_NUMERIC')||($rsType == '\\PR\\Model::DT_DATE')){
			$str = '0';
		}else if($rsType == '\\PR\\Model::DT_FLOAT'){
			$str = '0.0';
		}
		return $str;
	}

	private function _getType($type){
		$typeStr = '\\PR\\Model::DT_NUMERIC';
		if($type == Model::DT_NUMERIC){
			$typeStr = '\\PR\\Model::DT_NUMERIC';
		}else if($type == Model::DT_FLOAT){
			$typeStr = '\\PR\\Model::DT_FLOAT';
		}else if($type == Model::DT_ALPHABET){
			$typeStr = '\\PR\\Model::DT_ALPHABET';
		}else if($type == Model::DT_ALPHANUMERIC){
			$typeStr = '\\PR\\Model::DT_ALPHANUMERIC';
		}else if($type == Model::DT_TEXT){
			$typeStr = '\\PR\\Model::DT_TEXT';
		}else if($type == Model::DT_PASSWORD){
			$typeStr = '\\PR\\Model::DT_PASSWORD';
		}else if($type == Model::DT_URL){
			$typeStr = '\\PR\\Model::DT_URL';
		}else if($type == Model::DT_EMAIL){
			$typeStr = '\\PR\\Model::DT_EMAIL';
		}else if($type == Model::DT_POSTCODE){
			$typeStr = '\\PR\\Model::DT_POSTCODE';
		}else if($type == Model::DT_TEL){
			$typeStr = '\\PR\\Model::DT_TEL';
		}else if($type == Model::DT_DATE){
			$typeStr = '\\PR\\Model::DT_DATE';
		}else if($type == Model::DT_DOMAIN){
			$typeStr = '\\PR\\Model::DT_DOMAIN';
		}else if($type == Model::DT_LOGINID){
			$typeStr = '\\PR\\Model::DT_LOGINID';
		}else if($type == Model::DT_URI){
			$typeStr = '\\PR\\Model::DT_URI';
		}
		return $typeStr;
	}

	private function _getKind($ins){
		$kindStr = '\\PR\\Model::INS_NONE';
		$ins = mb_strtolower($ins);
		if($ins == 'serial'){
			$kindStr = '\\PR\\Model::INS_SERIAL';
		}else if($ins == 'unique'){
			$kindStr = '\\PR\\Model::INS_UNIQUE';
		}
		return $kindStr;
	}
}

class ModelData{
	public $sClass = null;
	public $sName = null;
	public $sTable = null;
	public $aColumns = array();
	public $aPrimaryKeys = array();
	public $aInsLines = array();

	public function __construct($rsClass,$rsName){
		$this->sClass = Misc::trim($rsClass);
		$this->sName = Misc::trim($rsName);
	}
}
?>
