<?php
/* Copyright 2013 dodat */
/*---------------------------------------------------------------------------*
 * Class
 *      クライアントリクエスト情報
 *---------------------------------------------------------------------------*/
namespace PR;

class Request{

	const MODE_NONE = 0;
	const MODE_DOMAIN = 1;
	const MODE_URI = 2;

	const PLATFORM_PC = 0;
	const PLATFORM_TABLET = 1;
	const PLATFORM_SPHONE = 2;
	const PLATFORM_FPHONE = 3;

	// PHPのstaticはTLSであり、multi-thread safety.
	public static $sACCEPT = null;
	public static $sDOC_ROOT = null;
	public static $bSSL = false;
	public static $sSCHEME = 'http://';
	public static $sHOST = null;
	public static $sURI = null;
	public static $sPATH = null;
	public static $sFILE = null;
	public static $sQUERY = null;
	public static $sFRAGMENT = null;
	public static $sMETHOD = null;
	public static $sIPADDR = null;
	public static $sREMOTE_HOST = null;

	public static $sSUBDOMAIN = null;
	public static $sSUBDIR = null; // sub directory without subsys
	public static $sSUBDIR2 = null; // sub directory with subsys
	public static $iPLATFORM = 0;

	public static $sSUBSYSTEM = null;
	public static $sDEST_CLASS = null;
	public static $sDEST_METHOD = null;
	public static $sDEST_PATH = null;

/*---------------------------------------------------------------------------*
 * Public Methods
 *---------------------------------------------------------------------------*/
	public static function generate($rsIndex=''){
		//if(!empty(self::$sACCEPT)) return;
		self::$sACCEPT = $_SERVER['HTTP_ACCEPT'];
		self::$sDOC_ROOT = $_SERVER['DOCUMENT_ROOT'];
		if(isset($_SERVER['HTTPS'])) self::$bSSL = true;
		if(self::$bSSL) self::$sSCHEME = 'https://';
		self::$sHOST = $_SERVER['HTTP_HOST'];
		$uri = HTTPUtil::parseURI($_SERVER['REQUEST_URI'],$rsIndex);
		self::$sURI = $uri['uri'];
		self::$sPATH = $uri['dir'];
		self::$sFILE = $uri['file'];
		self::$sQUERY = $uri['query'];
		self::$sFRAGMENT = $uri['fragment'];
		self::$sMETHOD = $_SERVER['REQUEST_METHOD'];
		self::$sIPADDR = $_SERVER['REMOTE_ADDR'];
		//self::$sREMOTE_HOST = $_SERVER['REMOTE_HOST'];

		$dir = self::$sPATH;
		$root = SysEnv::getYourDocRoot();
		$root = HTTPUtil::formatURL($root);
		if(!empty($root)){
			$pos = strpos(self::$sPATH,$root);
			if($pos === 0){
				$dir = Misc::trim(substr(self::$sPATH,strlen($root)),'/');
				if(empty($dir)) $dir = '';
			}else{
				//ELOG(SMSG('PR_E005',self::$sPATH,$root));
			}
		}
		self::$sSUBDIR = $dir;
		self::$sSUBDIR2 = $dir;
		self::$iPLATFORM = HTTPUtil::getDeviceType();
	}

	public static function setRemoteHost(){
		self::$sREMOTE_HOST = gethostbyaddr(self::$sIPADDR);
	}

	public static function setSubSystem(){
		$iMode = SysEnv::getSubSysMode();
		$sDomain = SysEnv::getSubSysMainDomain();
		$sURI = SysEnv::getSubSysURIRoot();

		$subSys = 'org';
		if($iMode == self::MODE_NONE){
			$subSys = 'org';
		}else if($iMode == self::MODE_DOMAIN){
			$pos = strpos(self::$sHOST,'.'.$sDomain);
			if($pos === false){
				ELOG(SMSG('PR_E012',self::$sHOST));
				return;
			}
			self::$sSUBDOMAIN = substr(self::$sHOST,0,$pos);
			$subSys = self::$sSUBDOMAIN;
		}else if($iMode == self::MODE_URI){
			if(empty(self::$sPATH)){
				ELOG(SMSG('PR_E012',self::$sPATH));
				return;
			}
			$dir = '';
			$root = HTTPUtil::formatURL($sURI);
			if(empty($root)){
				$parts = explode('/',self::$sPATH);
				$subSys = $parts[0];
				$dir = substr(self::$sPATH,strlen($subSys)+1);
			}else{
				$pos = strpos(self::$sPATH,$root);
				if($pos === 0){
					$dir = Misc::trim(substr(self::$sPATH,strlen($root)),'/');
					$parts = explode('/',$dir);
					if(count($parts) == 0){
						ELOG(SMSG('PR_E012',self::$sPATH));
						return;
					}
					$subSys = $parts[0];
					$dir = substr($dir,strlen($subSys)+1);
				}else{
					ELOG(SMSG('PR_E006',self::$sPATH,$root));
					return;
				}
			}
			self::$sSUBDIR2 = $dir;
		}
		self::$sSUBSYSTEM = $subSys;
	}

	public static function SetSubSystemF($rsSubSystem){
		self::$sSUBSYSTEM = $rsSubSystem;
	}

	public static function setDestMethod($raDest){
		self::$sDEST_CLASS = $raDest['class'];
		self::$sDEST_METHOD = $raDest['method'];
	}

	public static function setDestPath($rsPath){
		self::$sDEST_PATH = $rsPath;
	}

	public static function toString(){
		$str  = 'accept='.self::$sACCEPT;
		$str .= ' doc_root='.self::$sDOC_ROOT;
		$str .= ' ssl='.self::$bSSL;
		$str .= ' scheme='.self::$bSCHEME;
		$str .= ' host='.self::$sHOST;
		$str .= ' uri='.self::$sURI;
		$str .= ' path='.self::$sPATH;
		$str .= ' file='.self::$sFILE;
		$str .= ' query='.self::$sQUERY;
		$str .= ' fragment='.self::$sFRAGMENT;
		$str .= ' method='.self::$sMETHOD;
		$str .= ' ipaddr='.self::$sIPADDR;
		$str .= ' remote='.self::$sREMOTE_HOST;
		$str .= ' subdir='.self::$sSUBDIR;
		$str .= ' subdir2='.self::$sSUBDIR2;
		$str .= ' platform='.self::$iPLATFORM;
		$str .= ' subsystem='.self::$sSUBSYSTEM;
		$str .= ' dest_class='.self::$sDEST_CLASS;
		$str .= ' dest_method='.self::$sDEST_METHOD;
		$str .= ' dest_path='.self::$sDEST_PATH;
		return $str;
	}

	public static function println($riMode=0){
		$str  = '<table>'."\n";
		$str .= '<tr><td style="font-weight:bold;">accept</td><td>'.self::$sACCEPT.'</td></tr>'."\n";
		$str .= '<tr><td style="font-weight:bold;">doc_root</td><td>'.self::$sDOC_ROOT.'</td></tr>'."\n";
		$str .= '<tr><td style="font-weight:bold;">ssl</td><td>'.self::$bSSL.'</td></tr>'."\n";
		$str .= '<tr><td style="font-weight:bold;">scheme</td><td>'.self::$sSCHEME.'</td></tr>'."\n";
		$str .= '<tr><td style="font-weight:bold;">host</td><td>'.self::$sHOST.'</td></tr>'."\n";
		$str .= '<tr><td style="font-weight:bold;">uri</td><td>'.self::$sURI.'</td></tr>'."\n";
		$str .= '<tr><td style="font-weight:bold;">path</td><td>'.self::$sPATH.'</td></tr>'."\n";
		$str .= '<tr><td style="font-weight:bold;">file</td><td>'.self::$sFILE.'</td></tr>'."\n";
		$str .= '<tr><td style="font-weight:bold;">query</td><td>'.self::$sQUERY.'</td></tr>'."\n";
		$str .= '<tr><td style="font-weight:bold;">fragment</td><td>'.self::$sFRAGMENT.'</td></tr>'."\n";
		$str .= '<tr><td style="font-weight:bold;">method</td><td>'.self::$sMETHOD.'</td></tr>'."\n";
		$str .= '<tr><td style="font-weight:bold;">ipaddr</td><td>'.self::$sIPADDR.'</td></tr>'."\n";
		$str .= '<tr><td style="font-weight:bold;">remote</td><td>'.self::$sREMOTE_HOST.'</td></tr>'."\n";
		$str .= '<tr><td style="font-weight:bold;">subdir</td><td>'.self::$sSUBDIR.'</td></tr>'."\n";
		$str .= '<tr><td style="font-weight:bold;">subdir2</td><td>'.self::$sSUBDIR2.'</td></tr>'."\n";
		$str .= '<tr><td style="font-weight:bold;">platform</td><td>'.self::$iPLATFORM.'</td></tr>'."\n";
		$str .= '<tr><td style="font-weight:bold;">subsystem</td><td>'.self::$sSUBSYSTEM.'</td></tr>'."\n";
		$str .= '<tr><td style="font-weight:bold;">dest_class</td><td>'.self::$sDEST_CLASS.'</td></tr>'."\n";
		$str .= '<tr><td style="font-weight:bold;">dest_method</td><td>'.self::$sDEST_METHOD.'</td></tr>'."\n";
		$str .= '<tr><td style="font-weight:bold;">dest_path</td><td>'.self::$sDEST_PATH.'</td></tr>'."\n";
		$str .= '</table>'."\n";
		print $str;
		//TRACE::trace($riMode,$str,1);
	}
}
?>
