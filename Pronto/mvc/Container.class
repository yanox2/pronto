<?php
/* Copyright 2013 dodat */
/*---------------------------------------------------------------------------*
 * Abstract class - Model
 *      エンティティコンテナ基底クラス
 *---------------------------------------------------------------------------*/
namespace PR;

class Container extends Model{

	// get data type
	const VARIABLE = 0;
	const POST = 1;
	const COLUMN = 2;

	protected $aNameTags = array();
	protected $aTargets = array();

	private $oEntity_ = null;

	private $sTable_ = null;
	private $aPrimaryKeys_ = null;
	private $aInsKey_ = null;
	//private $sMyName_ = null;

	private $aVarNames_ = array('sVariable','sPost','sColumn');

	public function __construct($roDao=null){
		$this->aTargets = array();
		parent::__construct($roDao);
	}

	public function setParameters($rsTable,$raPrimaryKeys,$raInsKey,$rsMyName=null){
		$this->sTable_ = $rsTable;
		$this->aPrimaryKeys_ = $raPrimaryKeys;
		$this->aInsKey_ = $raInsKey;
		$this->sMyName_ = $rsMyName;
		if(empty($rsMyName)) $this->sMyName_ = get_class($this);
	}

	public function setTable($rsTable){
		$this->sTable_ = $rsTable;
	}

/*---------------------------------------------------------------------------*
 * Public Methods (share View)
 *---------------------------------------------------------------------------*/
	public function getEntity(){
		return $this->oEntity_;
	}

	public function setEntity($roEntity){
		$this->oEntity_ = $roEntity;
	}

	public function newEntity($rbNoClearTargets=false){
		$path = SysEnv::getYourEntityFilePath();
		if($path != '/'){
			$cname = explode("\\", $this->sMyName_);
			$this->oEntity_ = \PR\EntityFactory::createEntity(end($cname));
			return $this->oEntity_;
		}
		if(!$rbNoClearTargets) $this->aTargets = array();
		$class = $this->sMyName_.'Entity';
		$this->oEntity_ = new $class;
		return $this->oEntity_;
	}

	public function isEmpty(){
		if(empty($this->oEntity_)) return true;
		foreach($this->aPrimaryKeys_ as $var){
			if(empty($this->oEntity_->$var)) return true;
		}
		return false;
	}

	public final function getNameTag($rsVar){
		return $this->aNameTags[$rsVar];
	}
	
	public final function setNameTags($aNameTags){
		$this->aNameTags = $aNameTags;
	}
	
	public final function getNameTags(){
		return $this->aNameTags;
	}

	public function convTagsFromVar($raTags,$riTo=self::VARIABLE){
		$toVar = $this->aVarNames_[$riTo];
		$array = array();
		foreach($raTags as $varTag){
			$array[] = $this->aNameTags[$varTag]->{$toVar};
		}
		return $array;
	}

	public function convTagsToVar($raTags,$riFrom=self::VARIABLE){
		$fromVar = $this->aVarNames_[$riFrom];
		$array = array();
		foreach($raTags as $tag){
			foreach($this->aNameTags as $nametag){
				if($tag == $nametag->{$fromVar}){
					$array[] = $nametag->sVariable;
					break;
				}
			}
		}
		return $array;
	}

	public function getTargets(){
		return $this->aTargets;
	}
	public function setTargets($raTargets){
		$this->aTargets = $raTargets;
	}
	public function addTargets($raTargets){
		$this->aTargets = array_merge($this->aTargets,$raTargets);
	}
	public function removeTargets($raTargets){
		$this->aTargets = array_diff($this->aTargets,$raTargets);
	}
	public function targetPrimary(){
		$this->aTargets = $this->aPrimaryKeys_;
	}
	public function targetAll(){
		$this->aTargets = array();
		foreach($this->aNameTags as $var=>$val){
			$this->aTargets[] = $var;
		}
	}
	public function targetData(){
		$this->aTargets = array();
		foreach($this->aNameTags as $var=>$val){
			if(!in_array($var,$this->aPrimaryKeys_)) $this->aTargets[] = $var;
		}
	}

	public function getHiddenTag($roEntity=null,$raTargets=null){
		$this->_getEntity($roEntity);
		$target = $raTargets;
		if(empty($target)) $target = $this->aTargets;
		$html = '';
		foreach($target as $var){
			$html .= HIDETAG($this,$var)."\n";
		}
		return $html;
	}
	public function getTrTag($roEntity=null,$raTargets=null,$rsPFix='',$rsClass='',$rsStyle='',$rsStartStr=''){
		$this->_getEntity($roEntity);
		$target = $raTargets;
		if(empty($target)) $target = $this->aTargets;
		$html = '<tr style="display:none;">'.$rsStartStr;
		foreach($target as $var){
			$html .= '<td><div id="'.$rsPFix.$this->aNameTags[$var]->sVariable.'" class="'.$rsClass.'" style="'.$rsStyle.'">'
				.$this->oEntity_->{$var}.'</div></td>';
		}
		$html .= '</tr>'."\n";
		return $html;
	}
	public function getFormTag($roEntity,$rsFormId,$rsAction,$rsName,$rsValue){
		$this->_getEntity($roEntity);
		$html = '<form id="'.$rsFormId.'" name="'.$rsFormId.'" method="post" action="'.$rsAction.'">'."\n"
			.'<input type="hidden" name="'.$rsName.'" value="'.$rsValue.'">'."\n"
			.'</form>'."\n";
		return $html;
	}

/*---------------------------------------------------------------------------*
 * Relay Entity method
 *---------------------------------------------------------------------------*/
	public function getArray($riType=Model::TYPE_ALL,$riTo=self::VARIABLE,$rsPFix=''){
		$toVar = $this->aVarNames_[$riTo];
		$this->_getEntity();
		$array = array();
		foreach($this->aNameTags as $var=>$val){
			if(in_array($var,$this->aPrimaryKeys_)){
				if(($riType == Model::TYPE_ALL)||($riType == Model::TYPE_PRIMARY)){
					if(in_array($var,$this->aTargets)){
						$key = $this->aNameTags[$var]->{$toVar};
						$array[$rsPFix.$key] = $this->oEntity_->{$var};
					}
				}
			}else{
				if(($riType == Model::TYPE_ALL)||($riType == Model::TYPE_DATA)){
					if(in_array($var,$this->aTargets)){
						$key = $this->aNameTags[$var]->{$toVar};
						$array[$rsPFix.$key] = $this->oEntity_->{$var};
					}
				}
			}
		}
		return $array;
	}

	public function getArrayX($raTargets,$riTo=self::VARIABLE,$rsPFix=''){
		$toVar = $this->aVarNames_[$riTo];
		$this->_getEntity();
		$array = array();
		foreach($this->aNameTags as $var=>$val){
			if(in_array($var,$raTargets)){
				$key = $this->aNameTags[$var]->{$toVar};
				$array[$rsPFix.$key] = $this->oEntity_->{$var};
			}
		}
		return $array;
	}

	public function setArray($raArray,$riFrom=self::VARIABLE,$rbNoTarget=false){
		$fromVar = $this->aVarNames_[$riFrom];
		$this->_getEntity();
		foreach($this->aNameTags as $var=>$val){
			$key = $this->aNameTags[$var]->{$fromVar};
			if(array_key_exists($key,$raArray)){
				$this->oEntity_->{$var} = $raArray[$key];
				if(!$rbNoTarget) $this->aTargets[] = $var;
			}
		}
	}

	public function post(){
		$this->aTargets = array();
		foreach($this->aNameTags as $var=>$val){
			$key = $this->aNameTags[$var]->sPost;
			$type = $this->aNameTags[$var]->iType;
			if(HTTPUtil::isPost($key)){
				$this->oEntity_->{$var} = HTTPUtil::getPostValue($key,$type);
				$this->aTargets[] = $var;
			}
		}
	}

	public function mergeEntity($roCntr,$rbTarget=false){
		$me = $this->_getEntity();
		$other = $roCntr->getEntity();
		foreach($this->aNameTags as $var=>$val){
			$tag = $roCntr->aNameTags[$var];
			if($tag->sColumn == $val->sColumn){
				$me->{$var} = $other->{$var};
				if($rbTarget) $this->aTargets[] = $var;
			}
		}
	}

	public function getJSONArray($raTargets,$raResults=null){
		$results = $raResults;
		if(!$results) $results = $this->aResults;
		if(!$results) return null;

		$myclass = get_class($this);
		$cntr = new $myclass();

		$json = array();
		foreach($results as $id=>$entity){
			$cntr->setEntity($entity);
			$arry = $cntr->getArrayX($raTargets);
			if(!$arry) continue;
			$arry2 = array();
			foreach($raTargets as $var=>$val){
				$idx = $val;
				if(!is_numeric($var)) $idx = $var;
				$arry2[$idx] = $arry[$val];
			}
			$json[$id] = $arry2;
		}
		return $json;
	}

/*---------------------------------------------------------------------------*
 * Check Post Value
 *---------------------------------------------------------------------------*/
	public function checkPostByTarget($rsSep='<br>',$raAccEmpties=null,$riMinLen=0,$riMaxLen=0,$riKind=0){
		$this->_getEntity();
		if(empty($this->aTargets)) return null;
		$msg = '';
		$sp = '';
		foreach($this->aTargets as $var){
			$tag = $this->aNameTags[$var];
			if($tag->iType == Model::DT_PASSWORD){
				$rc = $this->checkPasswordX($var,$riMinLen,$riMaxLen,$riKind);
			}else{
				$accEmpty = false;
				if(InKey($raAccEmpties,array($var))) $accEmpty = $raAccEmpties[$var];
				$rc = $this->checkPostX($var,$accEmpty);
			}
			if($rc != 0){
				$msg .= $sp.$this->getPostErrorMsgX($var,$rc,$riMinLen,$riMaxLen,$riKind);
				$sp = $rsSep;
			}
		}
		return $msg;
	}

	public function checkPostByTargetX($raAccEmpties=null,$riMinLen=0,$riMaxLen=0,$riKind=0){
		$this->_getEntity();
		if(empty($this->aTargets)) return null;
		$msgs = array();
		foreach($this->aTargets as $var){
			$tag = $this->aNameTags[$var];
			if($tag->iType == Model::DT_PASSWORD){
				$rc = $this->checkPasswordX($var,$riMinLen,$riMaxLen,$riKind);
			}else{
				$accEmpty = false;
				if(InKey($raAccEmpties,array($var))) $accEmpty = $raAccEmpties[$var];
				$rc = $this->checkPostX($var,$accEmpty);
			}
			if($rc != 0){
				$msgs[] = $this->getPostErrorMsgX($var,$rc,$riMinLen,$riMaxLen,$riKind);
			}
		}
		return $msgs;
	}

	public function checkPostX($rsVar,$rbAccEmpty=false){
		$this->_getEntity();
		$tag = $this->aNameTags[$rsVar];
		if(empty($tag)){
			ELOG(SMSG('PR_E011',$rsVar));
			return C_PR_ERR_EPARAM;
		}
		$val = $this->oEntity_->{$rsVar};
		$type = $tag->iType;
		$rc = $this->checkPost($val,$type,$rbAccEmpty);
		return $rc;
	}

	public function checkPasswordX($rsVar,$riMinLen=0,$riMaxLen=0,$riKind=0){
		$this->_getEntity();
		$tag = $this->aNameTags[$rsVar];
		if(empty($tag)){
			ELOG(SMSG('PR_E011',$rsVar));
			return C_PR_ERR_EPARAM;
		}
		$val = $this->oEntity_->{$rsVar};
		$rc = $this->checkPasswd($val,$riMinLen,$riMaxLen,$riKind);
		return $rc;
	}

	public function addPostErrorMsgX($rsMsg,$rsSep,$rsVar,$riCode,$riMinLen=0,$riMaxLen=0,$riKind=0){
		$msg = $rsMsg;
		$err = $this->getPostErrorMsgX($rsVar,$riCode,$riMinLen,$riMaxLen,$riKind);
		if(!empty($err)){
			$sp = $rsSep;
			if($sp === null) $sp = $this->sSep;
			if(empty($rsMsg)) $sp = '';
			$msg .= $sp.$err;
		}
		return $msg;
	}

	public function getPostErrorMsgX($rsVar,$riCode,$riMinLen=0,$riMaxLen=0,$riKind=0){
		if($riCode == 0) return '';
		$tag = $this->aNameTags[$rsVar];
		if(empty($tag)){
			ELOG(SMSG('PR_E011',$rsVar));
			return null;
		}
		$name = OMSG($tag->sTitle);
		$type = $tag->iType;
		$aCStrs = array('min'=>$riMinLen,'max'=>$riMaxLen,'kind'=>$riKind);
		$msg = $this->getPostErrorMsg($riCode,$name,$type,$aCStrs);
		return $msg;
	}

/*---------------------------------------------------------------------------*
 * Dao select
 *---------------------------------------------------------------------------*/
	public function hasX($raWhereTgs=null,$rsToken=null){
		//$aWheres = $this->_getArray($raWhereTgs,Model::TYPE_PRIMARY);
		$aWheres = $this->_getArray($raWhereTgs);
		$rc = $this->has($this->sTable_,$aWheres,$rsToken);
		return $rc;
	}

	public function numX($raWhereTgs=null,$rsToken=null,$rsSel=null){
		//$aWheres = $this->_getArray($raWhereTgs,Model::TYPE_PRIMARY);
		$aWheres = $this->_getArray($raWhereTgs);
		$rc = $this->num($this->sTable_,$aWheres,$rsToken,$rsSel);
		return $rc;
	}

	public function readX($raWhereTgs=null,$rsToken=null,$raSels=null){
		//$aWheres = $this->_getArray($raWhereTgs,Model::TYPE_PRIMARY);
		$aWheres = $this->_getArray($raWhereTgs);
		$rc = $this->read($this->sTable_,$aWheres,$rsToken,$raSels);
		if($rc != 0) return $rc;
		$this->oEntity_ = $this->aResults[0];
		return 0;
	}

	public function pageX($raWhereTgs=null,$rsToken=null,$raSels=null){
		//$aWheres = $this->_getArray($raWhereTgs,Model::TYPE_PRIMARY);
		$aWheres = $this->_getArray($raWhereTgs);
		$rc = $this->page($this->sTable_,$aWheres,$rsToken,$raSels);
		return $rc;
	}

	public function listsX($raWhereTgs=null,$rsToken=null,$raSels=null,$riType=Model::IDX_SERIAL,$raIndex=null,$roPager=null,$roSearcher=null){
		//$aWheres = $this->_getArray($raWhereTgs,Model::TYPE_PRIMARY);
		$aWheres = $this->_getArray($raWhereTgs);
		$rc = $this->lists($this->sTable_,$aWheres,$rsToken,$raSels,$riType,$raIndex,$roPager,$roSearcher);
		return $rc;
	}

/*---------------------------------------------------------------------------*
 * Dao update
 *---------------------------------------------------------------------------*/
	public function addX($roListener=null){
		$this->_getEntity();
		$this->targetAll();
		$aSets = $this->_getArray(null,Model::TYPE_DATA);
		$aWheres = $this->_getArray(null,Model::TYPE_PRIMARY);
		$rc = $this->add($this->sTable_,$aSets,$aWheres,$this->aInsKey_,$roListener);
		if($rc != 0) return $rc;

		$key = key($this->aInsKey_);
		$this->setArray(array($key=>$this->sInsKeyVal),self::COLUMN,true);
		return 0;
	}

	public function removeX($raWhereTgs=null,$rsToken=null){
		$this->_getEntity();
		//$aWheres = $this->_getArray($raWhereTgs,Model::TYPE_PRIMARY);
		$aWheres = $this->_getArray($raWhereTgs);
		if(empty($aWheres)){
			$this->errorOccured(C_PR_ERR_ENOENT,'PR_E020','removeX');
			return C_PR_ERR_ENOENT;
		}
		$rc = $this->remove($this->sTable_,$aWheres,$rsToken);
		return $rc;
	}

	public function updateX($raSetTgs=null,$raWhereTgs=null,$rsToken=null){
		$this->_getEntity();
		$aSets = $this->_getArray($raSetTgs,Model::TYPE_DATA);
		$aWheres = $this->_getArray($raWhereTgs,Model::TYPE_PRIMARY);
		if(empty($aSets)){
			$this->errorOccured(C_PR_ERR_ENOENT,'PR_E020','updateX1');
			return C_PR_ERR_ENOENT;
		}
		if(empty($aWheres)){
			$this->errorOccured(C_PR_ERR_ENOENT,'PR_E020','updateX2');
			return C_PR_ERR_ENOENT;
		}
		$rc = $this->update($this->sTable_,$aSets,$aWheres,$rsToken);
		return $rc;
	}

/*---------------------------------------------------------------------------*
 * Protected Methods
 *---------------------------------------------------------------------------*/
	// Override
	protected function setResults($raRecord,$riType,$raIndex=null){
		if(empty($raRecord)){
			$this->errorOccured(C_PR_ERR_EPARAM,'PR_E011','raRecord is null.');
			return C_PR_ERR_EPARAM;
		}
		$entity = $this->newEntity(true);
		$this->setArray($raRecord,self::COLUMN,true);

		if($riType == Model::IDX_SERIAL){
			$this->aResults[] = $entity;
		}else if($riType == Model::IDX_HIERARCHY){ // $this->aList_["$var1"]["$var2"] = $roBean;
			$num = count($raIndex);
			if($num == 1){
				$key1 = $raRecord[$raIndex[0]];
				$this->aResults[$key1] = $entity;
			}else if($num == 2){
				$key1 = $raRecord[$raIndex[0]];
				$key2 = $raRecord[$raIndex[1]];
				$this->aResults[$key1][$key2] = $entity;
			}else if($num == 3){
				$key1 = $raRecord[$raIndex[0]];
				$key2 = $raRecord[$raIndex[1]];
				$key3 = $raRecord[$raIndex[2]];
				$this->aResults[$key1][$key2][$key3] = $entity;
			}
		}else if($riType == Model::IDX_JOINKEY){ // $this->aList_["$var1---$var2"] = $roBean;
			$top = '';
			$sp = '';
			foreach($raIndex as $var){
				$top .= $sp.$raRecord[$var];
				$sp = $this->sIdxSep;
			}
			$this->aResults[$top] = $entity;
		}
	}

/*---------------------------------------------------------------------------*
 * Private Methods
 *---------------------------------------------------------------------------*/
	private function _getEntity($roEntity=null){
		$entity = $roEntity;
		if(empty($entity)) $entity = $this->oEntity_;
		if(empty($entity)){
			$this->errorOccured(C_PR_ERR_ENOENT,'PR_E018','_getEntity');
			return C_PR_ERR_ENOENT;
		}
		return $entity;
	}

	private function _getArray($raTargets,$riType=Model::TYPE_ALL){
		$array = null;
		if($raTargets === null){
			$array = $this->getArray($riType,self::COLUMN);
		}else{
			$array = $this->getArrayX($raTargets,self::COLUMN);
		}
		return $array;
	}
}
?>
