<?php
/* Copyright 2013 dodat */
/*---------------------------------------------------------------------------*
 * Class - Model
 *      エンティティファクトリークラス
 *---------------------------------------------------------------------------*/
namespace PR;

class EntityFactory{

	private static $aContainers__ = array();
	private static $aEntities__ = array();

	public static function createContainer($rsName=null, $dao=null){
		if(!array_key_exists($rsName,self::$aContainers__)){
			$cntr = self::newContainer($rsName, $dao);
			//$entity = self::newEntity($rsName);
			self::$aContainers__[$rsName] = $cntr;
			//self::$aContainers__[$rsName]->setEntity($entity);
			//self::$aEntities__[$rsName] = $entity;
		}
		$obj = clone self::$aContainers__[$rsName];
		return $obj;
	}

	public static function createEntity($rsName=null, $dao=null){
		if(!array_key_exists($rsName,self::$aEntities__)){
			if(!array_key_exists($rsName,self::$aContainers__)){
				$cntr = self::newContainer($rsName, $dao);
			}
			else {
				$cntr = self::$aContainers__[$rsName];
				self::$aContainers__[$rsName] = $cntr;
			}
			$entity = self::newEntity($rsName);
			//self::$aContainers__[$rsName]->setEntity($entity);
			self::$aEntities__[$rsName] = $entity;
		}
		$obj = clone self::$aEntities__[$rsName];
		return $obj;
	}

	public static function newContainer($rsName, $dao=null){
		self::_readFile();
		if(empty(self::$aClasses_)){
			throw new Exception(C_PR_ERR_ENOENT,SMSG('PR_E018','readFile'));
		}
		$cntr = new Container($dao);

		$cls = self::$aClasses_[$rsName];
		$tags = array();
		$targets = array();
		$inskey = array();
		$myname = self::$sNameSpace_ . '\\' . $cls->sClass;
		foreach($cls->aColumns as $key => $value) {
			$tp = explode('::', $value['type']);
			$tags[$value['var']] = new \PR\NameTag($value['var'], $value['post'], $key, $value['name'], constant($tp[0] . '::' . $tp[1]));
			$targets[] = $value['var'];
			if(array_key_exists('ins', $value)){
				$ins = explode('::', $value['ins']);
				$inskey[$key] = constant($ins[0] . '::' . $ins[1]);
			}
		}
		
		$primarykeys = array();
		foreach($cls->aPrimaryKeys as $var=>$col){
			$primarykeys[] = $var;
		}
		
		if (count($inskey) == 0) $inskey[] = \PR\Model::INS_NONE;

		$cntr->setParameters($cls->sTable,$primarykeys,$inskey,$myname);
		$cntr->setNameTags($tags);
		//$cntr->setTargets($targets);

		// ins追加
		foreach($cls->aInsLines as $ins) {
			if (substr($ins, 0 , 2) == '//') contnue;
			$parts = explode('=', $ins, 2);
			if (count($parts) != 2) continue;
			if (preg_match('/\$(.+)/', $parts[0], $matches) == 0) continue;
			$key = trim($matches[1]);
			$val = eval('return ' . $parts[1]);
			$cntr->{$key} = $val;
		}
		
		return $cntr;
	}

	public static function newEntity($rsName){
		$entity = new Entity();

		$cls = self::$aClasses_[$rsName];

		foreach($cls->aColumns as $col=>$inf){
			$ini = self::_getDefaultStr($inf['type']);
			if (is_numeric($ini)) $ini = intval($ini);
			elseif (is_null($ini)) $ini = null;
			
			$entity->$inf['var'] = $ini;
			
		}
		
		return $entity;
	}

	private static $sNameSpace_ = null;
	private static $aClasses_ = array();
	private static $aInsLines_ = array();

	private function _readFile(){
		$path = SysEnv::getYourEntityFilePath();
		$filer = new Filer($path);
		$rc = $filer->openFile();
		if($rc != 0){
			throw new Exception($rc,SMSG('PR_E017','openFile',$path));
		}

		$cmtPhase = false;
		$clsPhase = false;
		$insPhase = false;
		$bean = null;
		$lineNum = 0;
		while(($lineP = $filer->getLine(true)) !== null){
			$lineNum++;
			$line = Misc::trim($lineP);

			// insert phase
			if(mb_strpos($line,'--- ins --- */') !== false){
				$insPhase = false;
				continue;
			}
			if(mb_strpos($line,'/* --- ins ---') !== false){
				$insPhase = true;
				continue;
			}
			if($insPhase){
				$bean->aInsLines[] = $lineP;
				continue;
			}
			if(!$filer->checkLine($line)) continue;
			if(mb_strpos($line,'*/') !== false){
				$cmtPhase = false;
				continue;
			}
			if(mb_strpos($line,'/*') !== false){
				$cmtPhase = true;
				continue;
			}
			if(mb_strpos($line,'# namespace') !== false){
				self::$sNameSpace_ = $filer->substr($line,'# namespace');
			}
			if($cmtPhase) continue;

			if(!$clsPhase){
				$str = $filer->substr($line,'# Container:');
				if(empty($str)) continue;
				$names = explode(',',$str);
				$bean = new ModelData($names[0],$names[1]);
				$clsPhase = true;
				continue;
			}

			// class phase
			$str = $filer->substr($line,'primary key(',')');
			if(!empty($str)){
				$keys = explode(',',$str);
				foreach($keys as $pkey){
					$var = $bean->aColumns[$pkey]['var'];
					$bean->aPrimaryKeys[$var] = $pkey;
				}
				self::$aClasses_[$bean->sClass] = $bean;
				$clsPhase = false;
				continue;
			}
			// table
			$str = $filer->substr($line,'create table','(');
			if(!empty($str)){
				$bean->sTable = $str;
				continue;
			}
			// column
			$col = self::_getColumn($line,$filer);
			if($col == null){
				$msg = 'Invalid column. line='.$lineNum;
				throw new Exception(C_PR_ERR_EINVAL,$msg);
			}
			$bean->aColumns += $col;
		}
		$filer->closeFile();
	}

	private function _getColumn($rsLine,$roFiler){
		$line = $rsLine;
		if(mb_strpos($line,'var=') === false) return null;
		$column = array();
		$words = explode(' ',$line);
		$colName = $words[0];
		for($i=1; $i<count($words); $i++){
			if(!empty($words[$i])){
				$colType = $words[$i];
				break;
			}
		}
		$strs = explode(',',$roFiler->substr($line,'#'));
		$var=null;$post=null;$name=null;$type=null;$ins=null;
		foreach($strs as $part){
			if(mb_strpos($part,'var=') !== false) $var = mb_substr($part,4);
			if(mb_strpos($part,'post=') !== false) $post = mb_substr($part,5);
			if(mb_strpos($part,'name=') !== false) $name = mb_substr($part,5);
			if(mb_strpos($part,'type=') !== false) $type = mb_substr($part,5);
			if(mb_strpos($part,'ins=') !== false) $ins = mb_substr($part,4);
		}
		if($post == null) return null;
		$typeStr = self::_getType($type);
		$column[$colName] = array('var'=>$var,'post'=>$post,'name'=>$name,'type'=>$typeStr,'colType'=>$colType);
		if($ins != null) $column[$colName]['ins'] = self::_getKind($ins);
		return $column;
	}

	private function _getDefaultStr($rsType){
		$str = 'null';
		if(($rsType == '\\PR\\Model::DT_NUMERIC')||($rsType == '\\PR\\Model::DT_DATE')){
			$str = '0';
		}else if($rsType == '\\PR\\Model::DT_FLOAT'){
			$str = '0.0';
		}
		return $str;
	}

	private function _getType($type){
		$typeStr = '\\PR\\Model::DT_NUMERIC';
		if($type == Model::DT_NUMERIC){
			$typeStr = '\\PR\\Model::DT_NUMERIC';
		}else if($type == Model::DT_FLOAT){
			$typeStr = '\\PR\\Model::DT_FLOAT';
		}else if($type == Model::DT_ALPHABET){
			$typeStr = '\\PR\\Model::DT_ALPHABET';
		}else if($type == Model::DT_ALPHANUMERIC){
			$typeStr = '\\PR\\Model::DT_ALPHANUMERIC';
		}else if($type == Model::DT_TEXT){
			$typeStr = '\\PR\\Model::DT_TEXT';
		}else if($type == Model::DT_PASSWORD){
			$typeStr = '\\PR\\Model::DT_PASSWORD';
		}else if($type == Model::DT_URL){
			$typeStr = '\\PR\\Model::DT_URL';
		}else if($type == Model::DT_EMAIL){
			$typeStr = '\\PR\\Model::DT_EMAIL';
		}else if($type == Model::DT_POSTCODE){
			$typeStr = '\\PR\\Model::DT_POSTCODE';
		}else if($type == Model::DT_TEL){
			$typeStr = '\\PR\\Model::DT_TEL';
		}else if($type == Model::DT_DATE){
			$typeStr = '\\PR\\Model::DT_DATE';
		}else if($type == Model::DT_DOMAIN){
			$typeStr = '\\PR\\Model::DT_DOMAIN';
		}
		return $typeStr;
	}

	private function _getKind($ins){
		$kindStr = '\\PR\\Model::INS_NONE';
		$ins = mb_strtolower($ins);
		if($ins == 'serial'){
			$kindStr = '\\PR\\Model::INS_SERIAL';
		}else if($ins == 'unique'){
			$kindStr = '\\PR\\Model::INS_UNIQUE';
		}
		return $kindStr;
	}

}

class ModelData{
	public $sClass = null;
	public $sName = null;
	public $sTable = null;
	public $aColumns = array();
	public $aPrimaryKeys = array();

	public function __construct($rsClass,$rsName){
		$this->sClass = Misc::trim($rsClass);
		$this->sName = Misc::trim($rsName);
	}
}
?>
