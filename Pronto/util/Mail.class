<?php
/* Copyright 2013 dodat */
/*---------------------------------------------------------------------------*
 * Class
 *      メールクラス
 *---------------------------------------------------------------------------*/
namespace PR;

class Mail{

	private $aFrom_ = null;
	private $sTitle_ = null;
	private $sHeader_ = null;
	private $sFooter_ = null;
	private $sMailer_ = 'pronto';

	public function __construct(){
	}

/*---------------------------------------------------------------------------*
 * public methods
 *---------------------------------------------------------------------------*/
	public function setTitle($rsTitle){
		$this->sTitle_ = $rsTitle;
	}

	public function setHeader($rsHeader){
		$this->sHeader_ = $rsHeader;
	}

	public function setFooter($rsFooter){
		$this->sFooter_ = $rsFooter;
	}

	public function setMailer($rsMailer){
		$this->sMailer_ = $rsMailer;
	}

	public function setFrom($raFrom){
		$this->aFrom_ = $raFrom;
	}

	function send($raTo,$rsSubject,$rsBody,$raDoc=null,$raCC=null,$raBCC=null){
		if(empty($raTo)) return;
		if(empty($this->aFrom_)) return;
		mb_language('Japanese');
		mb_internal_encoding('UTF-8');
		$sbj = $rsSubject;
		if(!empty($this->sTitle_)) $sbj = $this->sTitle_.' '.$sbj;
		$body = Misc::parentheses($rsBody);
		$body = mb_convert_kana($body,'KV','UTF-8');
		if(!empty($this->sHeader_)) $body = $this->sHeader_."\r\n\r\n".$body;
		if(!empty($this->sFooter_)) $body .= "\r\n\r\n\r\n".$this->sFooter_;

		// メールヘッダ作成
		$sbj = mb_encode_mimeheader($sbj,'UTF-8');
		//$sbj = mb_encode_mimeheader($sbj,"ISO-2022-JP","B","");
		$sendto = '';
		$sp = '';
		foreach($raTo as $email=>$name){
			$name = mb_encode_mimeheader($name,'UTF-8');
			$sendto .= $sp.$name.' <'.$email.'>';
			$sp = ', ';
		}
		$from = '';
		$sp = '';
		foreach($this->aFrom_ as $email=>$name){
			$name = mb_encode_mimeheader($name,'UTF-8');
			$from .= $name.' <'.$email.'>';
			$sp = ', ';
		}

		// CC,BCCの設定
		$boundary = '-----------------Boundary_'.uniqid('b');
		$additional  = "MIME-Version: 1.0\r\n";
		$additional .= "X-Mailer: ".$this->sMailer_."\r\n";
		if(empty($raDoc)){
			$additional .= 'Content-Type: text/plain; charset="UTF-8"'."\r\n";
		}else{
			$additional .= 'Content-Type: multipart/mixed; boundary="'.$boundary.'"'."\r\n";
		}
		$additional .= 'From: '.$from."\r\n";
		$additional .= 'Reply-To: '.$from."\r\n";
	    $additional .= 'Return-Path: '.$from."\r\n";
		if(!empty($raCC)){
			$additional .= 'Cc: ';
			$sp = '';
			foreach($raCC as $email => $name){
				$name = mb_encode_mimeheader($name,'UTF-8');
				$additional .= $sp.$name.' <'.$email.'>';
				$sp = ', ';
			}
			$additional .= "\r\n";
		}
		if(!empty($raBCC)){
			$additional .= 'Bcc: ';
			$sp = '';
			foreach($raBCC as $email => $name){
				$name = mb_encode_mimeheader($name,'UTF-8');
				$additional .= $sp.$name.' <'.$email.'>';
				$sp = ', ';
			}
			$additional .= "\r\n";
		}

		// 添付ファイルの取得
		if(!empty($raDoc)){
			list($fname,$path) = each($raDoc);
			$fdata = file_get_contents($path);
			$mbody  = "\r\n--".$boundary."\r\n";
			$mbody .= 'Content-Type: text/plain; charset="UTF-8"'."\r\n\r\n";
			$mbody .= $body."\r\n";
			$mbody .= '--'.$boundary."\r\n";
			$mbody .= 'Content-Type: application/octet-stream; name="'.$fname.'"'."\r\n";
			$mbody .= 'Content-Transfer-Encoding: base64'."\r\n";
			$mbody .= 'Content-Disposition: attachment; filename="'.$fname.'"'."\r\n\r\n";
			$mbody .= chunk_split(base64_encode($fdata))."\r\n";
			$mbody .= '--'.$boundary."--\r\n";
			$body = $mbody;
		}
		$rc = mail($sendto,$sbj,$body,$additional);
		return $rc;
	}

/*---------------------------------------------------------------------------*
 * メール受信後処理
 *---------------------------------------------------------------------------*/
// $aInf['body']['body']：メール本文（テキスト）
// $aInf['body']['html']：メール本文（テキスト）
// $aInf['body']['files'][n]：添付ファイルまたは本文中（HTML）の画像ファイル
// $aInf['body']['files'][n]['type']：ファイルタイプ（image/jpegなど）
// $aInf['body']['files'][n]['name']：添付ファイルのオリジナル名
// $aInf['body']['files'][n]['body']：添付ファイル本体。バイナリストリーム
	public function aGetReceiveEMailInf(){
		$source = file_get_contents("php://stdin");
		if(!$source) exit;
		$params['include_bodies'] = true;
		$params['decode_bodies'] = true;
		$params['decode_headers'] = true;
		$decoder = new Mail_mimeDecode($source);
		$structures = $decoder->decode($params);

		$aInf = array();
		$aInf['subject'] = mb_convert_encoding(mb_decode_mimeheader($structures->headers['subject']),'UTF-8','ISO-2022-JP');
		$aInf['from'] = mb_convert_encoding(mb_decode_mimeheader($structures->headers['from']),'UTF-8','ISO-2022-JP');
		if(mb_strpos($aInf['from'],'<') !== false){
			$start = mb_strpos($aInf['from'],'<');
			$end = mb_strpos($aInf['from'],'>');
			$len = $end - $start - 1;
			$aInf['from'] = mb_substr($aInf['from'],$start+1,$len);
		}
		$aInf['to'] = mb_convert_encoding(mb_decode_mimeheader($structures->headers['to']),'UTF-8','ISO-2022-JP');
		if(mb_strpos($aInf['to'],'<') !== false){
			$start = mb_strpos($aInf['to'],'<');
			$end = mb_strpos($aInf['to'],'>');
			$len = $end - $start - 1;
			$aInf['to'] = mb_substr($aInf['to'],$start+1,$len);
		}
		$aBody = PREMail::getBody($structures);
		$aInf['body'] = $aBody;

		return $aInf;
	}

	public function getBody($structure){
		$i=0;
		$ary = array();
		if(strtolower($structure->ctype_primary) == 'multipart'){
			foreach($structure->parts as $part){
				if($part->disposition == 'attachment'){
					$ary['files'][$i]['type'] = strtolower($part->ctype_primary).'/'.strtolower($part->ctype_secondary);
					$ary['files'][$i]['name'] = $part->ctype_parameters['name'];
					$ary['files'][$i]['body'] = $part->body;
					$i++;
				}else{
					switch(strtolower($part->ctype_primary)){
					  case 'image': // HTML本文中の画像
						$ary['files'][$i]['type'] = strtolower($part->ctype_primary).'/'.strtolower($part->ctype_secondary);
						$ary['files'][$i]['name'] = $part->ctype_parameters['name'];
						$ary['files'][$i]['cid'] = trim($part->headers['content-id'],"<>");
						$ary['files'][$i]['body'] = $part->body;
						$i++;
						break;
					  case 'text': // テキスト本文の抽出
						if($part->ctype_secondary == 'plain'){
							$ary['body'] = trim(mb_convert_encoding($part->body,'UTF-8','ISO-2022-JP'));
						}else{ // HTML本文
							$ary[$part->ctype_secondary] = trim(mb_convert_encoding($part->body,'UTF-8','ISO-2022-JP'));
						}
						break;
					  case 'multipart': // マルチパート中にマルチパートがある場合
						PREMail::getBody($part);
						break;
					}
				}
			}
		}else if(strtolower($structure->ctype_primary) == 'text'){
			// テキスト本文のみのメール
			$ary['body'] = trim(mb_convert_encoding($structure->body,'UTF-8','ISO-2022-JP'));
		}
		return $ary;
	}
}
?>
