<?php
/* Copyright 2013 dodat */
/*---------------------------------------------------------------------------*
 * Class - I/O
 *      ファイラー
 *---------------------------------------------------------------------------*/
namespace PR;

class Filer{

	const NUMERIC = 1;
	const STRING = 2;

	private $oInFp_ = null;
	private $oOutFp_ = null;
	private $sInFile_ = null;
	private $sOutFile_ = null;

	private $sFromEnc_ = 'UTF-8,eucJP-win,EUC-JP,SJIS-win,SJIS';
	//private $sFromEnc_ = 'SJIS,SJIS-win,EUC-JP';
	private $sToEnc_ = 'SJIS-win';

	public function __construct($rsPath=null,$rsEncode='UTF-8,eucJP-win,EUC-JP,SJIS-win,SJIS'){
		$this->sInFile_ = $rsPath;
		$this->sFromEnc_ = $rsEncode;
	}

/*---------------------------------------------------------------------------*
 * Set Parameters
 *---------------------------------------------------------------------------*/
	public function setInFile($rsPath,$rsEncode='UTF-8,eucJP-win,EUC-JP,SJIS-win,SJIS'){
		$this->sInFile_ = $rsPath;
		$this->sFromEnc_ = $rsEncode;
	}

	public function setOutFile($rsPath,$rsEncode='SJIS-win'){
		$this->sOutFile_ = $rsPath;
		$this->sToEnc_ = $rsEncode;
	}

/*---------------------------------------------------------------------------*
 * Public Methods
 *---------------------------------------------------------------------------*/
	public function openFile(){
		$inout = ($this->sInFile_ == $this->sOutFile_);
		if(!empty($this->sInFile_)){
			$opt = 'r';
			if($inout) $opt = 'rw';
			$fp = fopen($this->sInFile_,$opt);
			if(($fp === false)||($fp === null)){
				$rc = self::errorOccurred(C_PR_ERR_ESYSTEM,SMSG('PR_E017','fopen',$this->sInFile_));
				return $rc;
			}
			$this->oInFp_ = $fp;
		}
		if($inout) return 0;

		if(!empty($this->sOutFile_)){
			$fp = fopen($this->sOutFile_,'w');
			if($fp === false){
				$rc = self::errorOccurred(C_PR_ERR_ESYSTEM,SMSG('PR_E017','fopen',$this->sOutFile_));
				return $rc;
			}
			$this->oOutFp_ = $fp;
		}
		return 0;
	}

	public function closeFile(){
		if(!empty($this->oInFp_)) fclose($this->oInFp_);
		if(!empty($this->oOutFp_)) fclose($this->oOutFp_);
	}

	public function getLine($rbNoTrim=false){
		$str = fgets($this->oInFp_,1024);
		if($str === false) return null;
		$line = mb_convert_encoding($str,'UTF-8',$this->sFromEnc_);
		if(!$rbNoTrim) $line = Misc::trim($line);
		return $line;
	}

	public function getLineCSV(){
		$data = $this->fgetCSV($this->oInFp_,1024);
		if($data === false) return null;
		mb_convert_variables('UTF-8',$this->sFromEnc_,$data);
		return $data;
	}

	public function checkLine($rsLine,$rbComment=false){
		if(($rsLine == "\r\n")||($rsLine == "\r")||($rsLine == "\n")
			||(empty($rsLine))||($rsLine == " ")||($rsLine == "　")) return false;
		if($rbComment){
			$chr = mb_substr($rsLine,0,1);
			if(($chr == '#')||($chr == '＃')) return false;
		}
		return true;
	}

	public function getEncode($rsStr){
		// 順番が重要。UTF-8はSJISを網羅している。
		$sEnc = null;
		if(mb_check_encoding($rsStr,'SJIS-win')){
			$sEnc = 'SJIS-win';
		}else if(mb_check_encoding($rsStr,'SJIS')){
			$sEnc = 'SJIS';
		}else if(mb_check_encoding($rsStr,'eucJP-win')){
			$sEnc = 'eucJP-win';
		}else if(mb_check_encoding($rsStr,'EUC-JP')){
			$sEnc = 'EUC-JP';
		}else if(mb_check_encoding($rsStr,'UTF-8')){
			$sEnc = 'UTF-8';
		}
		return $sEnc;
	}

	public function writeFile($rsText,$rbRet=false){
		if($rbRet) $rsText .= "\r\n";
		$fp = $this->oOutFp_;
		if($this->sInFile_ == $this->sOutFile_) $fp = $this->oInFp_;
		$rc = fwrite($fp,mb_convert_encoding($rsText,$this->sToEnc_,$this->sFromEnc_));
		if($rc === false){
			$rc = self::errorOccurred(C_PR_ERR_ESYSTEM,SMSG('PR_E017','fwrite',$this->sOutFile_));
			return $rc;
		}
		return 0;
	}

	public function substr($rsStr,$rsStartStr=null,$rsEndStr=null){
		$str = mb_strtolower($rsStr);
		$start = mb_strtolower($rsStartStr);
		$end = mb_strtolower($rsEndStr);
		$len = mb_strlen($str);
		$spos = 0;
		$epos = 0;
		if(!empty($start)){
			$spos = mb_strpos($str,$start);
			if($spos === false) return null;
			$spos += mb_strlen($start);
		}
		if(!empty($end)){
			$epos = mb_strpos($str,$end);
			if($epos === false) return null;
		}
		$res = null;
		if(($spos)&&($epos)){
			$res = mb_substr($rsStr,$spos,$epos-$spos);
		}else if($spos){
			$res = mb_substr($rsStr,$spos);
		}else if($epos){
			$res = mb_substr($rsStr,0,$epos);
		}
		return Misc::trim($res);
	}

	public function fgetCSV(&$handle,$length=null,$d=',',$e='"'){
		$d = preg_quote($d);
		$e = preg_quote($e);
		$_line = "";
		while(($eof != true)and(!feof($handle))){
			$_line .= (empty($length) ? fgets($handle) : fgets($handle, $length));
			$itemcnt = preg_match_all('/'.$e.'/', $_line, $dummy);
			if($itemcnt % 2 == 0) $eof = true;
		}
		$_csv_line = preg_replace('/(?:\\r\\n|[\\r\\n])?$/', $d, trim($_line));
		$_csv_pattern = '/('.$e.'[^'.$e.']*(?:'.$e.$e.'[^'.$e.']*)*'.$e.'|[^'.$d.']*)'.$d.'/';
		preg_match_all($_csv_pattern, $_csv_line, $_csv_matches);
		$_csv_data = $_csv_matches[1];
		for($_csv_i=0;$_csv_i<count($_csv_data);$_csv_i++){
			$_csv_data[$_csv_i]=preg_replace('/^'.$e.'(.*)'.$e.'$/s','$1',$_csv_data[$_csv_i]);
			$_csv_data[$_csv_i]=str_replace($e.$e, $e, $_csv_data[$_csv_i]);
		}
		return empty($_line) ? false : $_csv_data;
	}

/*---------------------------------------------------------------------------*
 * Utility
 *---------------------------------------------------------------------------*/
	// 拡張子の取得
	public static function getFileExt($rsPath){
		$pos = strrpos($rsPath,'.');
		if($pos === false) return null;
		$ext = substr($rsPath,$pos+1);
		return $ext;
	}

	// ファイル情報
	public static function fileStat($rsFile){
		if(!is_readable($rsFile)){
			self::errorOccurred(C_PR_ERR_ESYSTEM,SMSG('PR_E015',$rsFile));
			return null;
		}
		$stat = stat($rsFile);
		if(!$stat){
			self::errorOccurred(C_PR_ERR_ESYSTEM,SMSG('PR_E017','stat',$rsFile));
			return null;
		}

		$date = date("Y/m/d H:i:s",$stat['mtime']);
		$size = ceil($stat['size'] / 1024);

		$stat['pr_date'] = $date;
		$stat['pr_size'] = $size;
		return $stat;
	}

	// ファイルの削除
	public static function removeFile($rsFile){
		if(!file_exists($rsFile)) return 0;
		$rc = unlink($rsFile);
		if($rc === false){
			$rc = self::errorOccurred(C_PR_ERR_ESYSTEM,SMSG('PR_E017','unlink',$rsFile));
			return $rc;
		}
		return 0;
	}

	// ディレクトリの削除
	public static function removePath($rsPath){
		if(!is_dir($rsPath)){
			$rc = self::errorOccurred(C_PR_ERR_ESYSTEM,SMSG('PR_E016',$rsPath));
			return $rc;
		}
		$files = glob($rsPath.'/*');
		if(!empty($files)){
			foreach($files as $file){
				self::removeFile($file);
			}
		}
		$rc = rmdir($rsPath);
		if($rc === false){
			$rc = self::errorOccurred(C_PR_ERR_ESYSTEM,SMSG('PR_E017','rmdir',$rsPath));
			return $rc;
		}
		return 0;
	}

	public static function makePath($rsPath,$mode=0777){
		$dirs = explode('/',$rsPath);
		if(count(dirs) == 0) return 0;
		$path = '';
		foreach($dirs as $dir){
			if(empty($dir)) continue;
			$path .= '/'.$dir;
			if(!file_exists($path)){
				$rc = mkdir($path,$mode);
				if(!$rc) return C_PR_ERR_ESYSTEM;
				$rc = chmod($path,$mode);
				if(!$rc) return C_PR_ERR_ESYSTEM;
			}
		}
		return 0;
	}

	public static function checkUpload($rsPostName,$riMaxSize=2,$riType=0){
		$postFile = $_FILES[$rsPostName]['name'];
		$tmpFile = $_FILES[$rsPostName]['tmp_name'];
		$size = $_FILES[$rsPostName]['size'];
		$error = $_FILES[$rsPostName]['error'];

		$rc = 0;
		if($size == 0){
			$rc = C_PR_ERR_ENOENT;
		}else if($size > $riMaxSize*1048576){
			//$msg = 'ファイルが大きすぎます。'.$riMaxSize.'Mbyte 以内にしてください。';
			$rc = C_PR_ERR_EOVER;
		}
		if(($rc == 0)&&($riType)){
			$ext = self::getFileExt($postFile);
			$ext = strtolower($ext);
			if($riType == 1){ // CSV
				if($ext != 'csv'){
					//$msg = 'ファイルの拡張子に誤りがあります。読み込むファイルの拡張子は、.csvを指定してください。'."\n";
					//$msg .= '（通常、CSV形式のファイルは拡張子が.csvになります）';
					$rc = C_PR_ERR_EPARAM;
				}
			}else if($riType == 2){ // image
				$imgExts = array('gif','jpg','jpeg','png');
				if(!in_array($ext,$imgExts)){
					//$msg = 'ファイルの拡張子に誤りがあります。読み込むファイルの拡張子は、.gif .jpg .jpeg .pngを指定してください。'."\n";
					$rc = C_PR_ERR_EPARAM;
				}
			}
		}
		return $rc;
	}

	public static function upload($rsPostName,$rsFile){
		$upFile = $_FILES[$rsPostName]['tmp_name'];
		$rc = move_uploaded_file($upFile,$rsFile);
		if($rc === false){
			//$msg = 'ファイルのアップロードに失敗しました。時間をおいて、再度実行してください。';
			$rc = C_PR_ERR_ESYSTEM;
		}
		return 0;
	}

	// ファイルのダウンロード
	public static function download($rsPath,$rsType=null){
		if(!is_readable($rsPath)){
			$rc = self::errorOccurred(C_PR_ERR_ESYSTEM,SMSG('PR_E015',$rsPath));
			return $rc;
		}
		session_cache_limiter("private_no_expire");

		$mimeType = $rsType;
		if($rsType == 'file'){
			$mimeType = 'application/octet-stream';
		}else if($rsType == 'img'){
			$mimeType = self::GetContentType($rsPath);
		}

		$size = filesize($rsPath);
		if($size == 0) return C_PR_ERR_ENOENT;
		$time = date('r',filemtime($rsPath));

		$path = $rsPath;
		if($rsType == 'file'){
			$path = mb_convert_encoding($rsPath,'SJIS','UTF-8');
			header("Content-Disposition: attachment; filename=\"".basename($path)."\"");
		}
		header("Content-Type: ".$mimeType);
		header("Content-Length: ".$size);
		header('Last-Modified: '.$time);
		header('Connection: Keep-Alive');
		readfile($path);
	}

	// 画像のダウンロード
	public static function downImage($rsPath,$riReSize=0){
		if(!is_readable($rsPath)){
			$rc = self::errorOccurred(C_PR_ERR_ESYSTEM,SMSG('PR_E015',$rsPath));
			return $rc;
		}
		session_cache_limiter("private_no_expire");
		$mimeType = self::GetContentType($rsPath);
		if(!preg_match('/jpeg|png|gif|bmp/i',$mimeType,$matches)) return;
		$gtype = $matches[0];

		// size
		$size = getimagesize($rsPath);
		$resize = $size;
		$noReSz = false;
		if(($size[0] <= $riReSize)&&($size[1] <= $riReSize)) $noReSz = true;

		if($riReSize > 0){
			if($size[0] > $size[1]){
				$resize[0] = $riReSize;
				$resize[1] = $size[1] * $riReSize / $size[0];
			}else{
				$resize[1] = $riReSize;
				$resize[0] = $size[0] * $riReSize / $size[1];
			}
		}else{
			$noReSz = true;
		}

		// dst
		if($gtype == 'jpeg'){
			$src_im = imagecreatefromjpeg($rsPath);
		}else if($gtype == 'png'){
			$src_im = imagecreatefrompng($rsPath);
		}else if($gtype == 'gif'){
			$src_im = imagecreatefromgif($rsPath);
		}else{
			$src_im = imagecreatefromwbmp($rsPath);
		}
		if($noReSz){
			$dst_im = $src_im;
		}else{
			$dst_im = ImageCreateTrueColor($resize[0],$resize[1]);
			ImageCopyResampled($dst_im,$src_im,0,0,0,0,$resize[0],$resize[1],$size[0],$size[1]);
		}

		// out
		header("Content-Type: ".$mimeType);
		if($gtype == 'jpeg'){
			imagejpeg($dst_im);
		}else if($gtype == 'png'){
			imagepng($dst_im);
		}else if($gtype == 'gif'){
			imagegif($dst_im);
		}else{
			imagewbmp($dst_im);
		}

		// destory
		imagedestroy($src_im);
		if(!$noReSz) imagedestroy($dst_im);
	}

	public function resizeImage($raSzParams,$rsSrc,$rsOut=null){
		$resize = $raSzParams['resize'];
		$retype = $raSzParams['retype'];
		if(!$rsOut) $rsOut = $rsSrc;

		if(!is_readable($rsSrc)){
			$rc = self::errorOccurred(C_PR_ERR_ESYSTEM,SMSG('PR_E015',$rsSrc));
			return $rc;
		}
		session_cache_limiter("private_no_expire");
		$mimetype = self::GetContentType($rsSrc);
		if(!preg_match('/jpeg|png|gif|bmp/i',$mimetype,$matches)){
			$rc = self::errorOccurred(C_PR_ERR_ESYSTEM,SMSG('PR_E017',$rsSrc));
			return $rc;
		}
		$gtype = $matches[0];
		$exif = null;
		$orientation = 1;
		if($gtype == 'jpeg'){
			$exif = exif_read_data($rsSrc,'EXIF');
			if($exif) $orientation = $exif['Orientation'];
		}

		// resize
		$src_im = self::getImage($rsSrc,$gtype);
		$dst_im = $src_im;
		$size = getimagesize($rsSrc);
		$rz = array();
		$reSz = false;
		if(($resize)&&(($size[0] > $resize)||($size[1] > $resize))){
			if($size[0] > $size[1]){
				$rz[0] = $resize;
				$rz[1] = $size[1] * $resize / $size[0];
			}else{
				$rz[1] = $resize;
				$rz[0] = $size[0] * $resize / $size[1];
			}
			$dst_im = ImageCreateTrueColor($rz[0],$rz[1]);
			ImageCopyResampled($dst_im,$src_im,0,0,0,0,$rz[0],$rz[1],$size[0],$size[1]);
			$reSz = true;
		}
		if(($orientation == 1)&&((!$retype)||($retype == $gtype))){
			if($reSz){
				self::outputImage($rsOut,$gtype,$dst_im);
			}else if($rsSrc != $rsOut){	
				$rc = copy($rsSrc,$rsOut);
			}
			return 0;
		}

		// 回転
		if($orientation > 1){
			$degrees = 0;
			$mode = null;
			if($orientation == 2){ // 水平反転
				$mode = 'IMG_FLIP_VERTICAL';
			}else if($orientation == 3){ // （反時計回りに）180°回転
				$degrees = 180;
			}else if($orientation == 4){ // 垂直反転
				$mode = 'IMG_FLIP_HORIZONTAL';
			}else if($orientation == 5){ // 水平反転、 反時計回りに90°回転
				$degrees = 270;
				$mode = 'IMG_FLIP_VERTICAL';
			}else if($orientation == 6){ // 反時計回りに90°回転
				$degrees = 270;
			}else if($orientation == 7){ // 垂直反転、 反時計回りに90°回転
				$degrees = 90;
				$mode = 'IMG_FLIP_HORIZONTAL';
			}else if($orientation == 8){ // 反時計回りに270°回転
				$degrees = 90;
			}
			if($mode) $dst_im = imageflip($dst_im,$mode);
			if($degrees > 0) $dst_im = imagerotate($dst_im,$degrees,0);
		}

		// retype
		$type = $gtype;
		if($retype) $type = $retype;
		self::outputImage($rsOut,$type,$dst_im);
		return 0;
	}

	public function clipImage($raSzParams,$rsSrc,$rsOut=null){
		$sx = $raSzParams['sx'];
		$sy = $raSzParams['sy'];
		$mx = $raSzParams['mx'];
		$my = $raSzParams['my'];
		if(!$rsOut) $rsOut = $rsSrc;

		if(!is_readable($rsSrc)){
			$rc = self::errorOccurred(C_PR_ERR_ESYSTEM,SMSG('PR_E015',$rsSrc));
			return $rc;
		}
		session_cache_limiter("private_no_expire");
		$mimetype = self::GetContentType($rsSrc);
		if(!preg_match('/jpeg|png|gif|bmp/i',$mimetype,$matches)){
			$rc = self::errorOccurred(C_PR_ERR_ESYSTEM,SMSG('PR_E017',$rsSrc));
			return $rc;
		}
		$gtype = $matches[0];

		// resize
		$src_im = self::getImage($rsSrc,$gtype);
		$dst_im = $src_im;
		$size = getimagesize($rsSrc);
		if(($sx > $size[0])||($sy > $size[1])){
			$rc = self::errorOccurred(C_PR_ERR_ESYSTEM,SMSG('PR_E011',$sx.' '.$sy));
			return $rc;
		}
		if($mx > $size[0]) $mx = $size[0];
		if($my > $size[1]) $my = $size[1];
		if(($sx == 0)&&($sy == 0)&&($mx == $size[0])&&($my == $size[1])){
			if($rsSrc != $rsOut){	
				$rc = copy($rsSrc,$rsOut);
			}
			return 0;
		}

		// crop
		$w = $mx - $sx;
		$h = $my - $sy;
		if(($w == 0)||($h == 0)){
			$rc = self::errorOccurred(C_PR_ERR_ESYSTEM,SMSG('PR_E011',$sx.' '.$sy.' '.$mx.' '.$my));
			return $rc;
		}
		$rect = array('x'=>$sx,'y'=>$sy,'width'=>$w,'height'=>$h);
		$dst_im = imagecrop($src_im,$rect);
		self::outputImage($rsOut,$gtype,$dst_im);
		return 0;
	}

	public static function getContentType($rsPath=null){
		$info = new \FInfo(FILEINFO_MIME_TYPE);
		$mime = $info->file($rsPath);
		return $mime;
	}

	public static function getImage($rsSrc,$rsType=null){
		if(!$rsType){
			$mimetype = self::GetContentType($rsSrc);
			if(!preg_match('/jpeg|png|gif|bmp/i',$mimetype,$matches)){
				$rc = self::errorOccurred(C_PR_ERR_ESYSTEM,SMSG('PR_E017',$rsSrc));
				return $rc;
			}
			$rsType = $matches[0];
		}
		$im = null;
		if($rsType == 'jpeg'){
			$im = imagecreatefromjpeg($rsSrc);
		}else if($rsType == 'png'){
			$im = imagecreatefrompng($rsSrc);
		}else if($rsType == 'gif'){
			$im = imagecreatefromgif($rsSrc);
		}else{
			$im = imagecreatefromwbmp($rsSrc);
		}
		return $im;
	}

	public static function outputImage($rsOut,$rsType,$roImage){
		if($rsType == 'jpeg'){
			imagejpeg($roImage,$rsOut);
		}else if($rsType == 'png'){
			imagepng($roImage,$rsOut);
		}else if($rsType == 'gif'){
			imagegif($roImage,$rsOut);
		}else{
			imagewbmp($roImage,$rsOut);
		}
		imagedestroy($roImage);
	}

/*---------------------------------------------------------------------------*
 * Protected Methods
 *---------------------------------------------------------------------------*/
	protected static function errorOccurred($riCode,$rsMessage){
		//throw new Exception($riCode,$rsMessage);
		ELOG($rsMessage);
		return $riCode;
	}
}
?>
